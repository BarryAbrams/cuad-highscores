'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getNested = require('get-nested');

var _getNested2 = _interopRequireDefault(_getNested);

var _site = require('../utils/site');

var _site2 = _interopRequireDefault(_site);

var _EntityMapper = require('./EntityMapper');

var _EntityMapper2 = _interopRequireDefault(_EntityMapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = _promise2.default))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var DrupalPage = function (_Component) {
    (0, _inherits3.default)(DrupalPage, _Component);

    function DrupalPage() {
        (0, _classCallCheck3.default)(this, DrupalPage);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DrupalPage.__proto__ || (0, _getPrototypeOf2.default)(DrupalPage)).apply(this, arguments));

        _this.state = {
            dataUrl: null,
            loadingData: true,
            pageUuid: null
        };
        _this.lastRequest = null;
        return _this;
    }
    /**
     * If this component exists in a tree that is invoked with the waitForHnData function, this function is invoked.
     * Only after the promise is resolved, the component will be mounted. To keep the data fetched here, we assign the
     * state to the hnContext provided by the DrupalPageContextProvider. This way, the state will be preserved trough
     * multiple renders.
     */


    (0, _createClass3.default)(DrupalPage, [{
        key: 'asyncBootstrap',
        value: function asyncBootstrap() {
            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var drupalPage;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.loadData(this.props);

                            case 2:
                                drupalPage = _context.sent;

                                this.context.hnContext.state = {
                                    drupalPage: {
                                        componentState: drupalPage,
                                        dataUrl: drupalPage.dataUrl
                                    },
                                    entities: []
                                };
                                return _context.abrupt('return', true);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
        /**
         * The first time this element is rendered, we always make sure the component and the Drupal page is loaded.
         */

    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            var state = (0, _getNested2.default)(function () {
                var drupalPage = _this2.context.hnContext.state.drupalPage;
                return drupalPage.dataUrl === _this2.props.url && drupalPage.componentState;
            });
            if (state) {
                this.setState(state);
            } else {
                this.loadData(this.props);
            }
        }
        /**
         * As soon as the url, mapper or asyncMapper props change, we want to load new data.
         * This always unmounts and mounts all children (Layout and ContentType).
         */

    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.url !== nextProps.url || this.props.mapper !== nextProps.mapper || this.props.asyncMapper !== nextProps.asyncMapper) {
                this.loadData(nextProps);
            }
        }
        /**
         * This makes sure the data for this url is ready to be rendered.
         * @param url
         * @param mapper
         * @param asyncMapper
         * @returns {Promise.<{pageUuid: string}>}
         */

    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.lastRequest = null;
        }
    }, {
        key: 'loadData',
        value: function loadData(_ref) {
            var url = _ref.url,
                mapper = _ref.mapper,
                asyncMapper = _ref.asyncMapper;

            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var lastRequest, _ref2, pageUuid, newState;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                lastRequest = (0, _symbol2.default)(url);

                                this.lastRequest = lastRequest;
                                this.setState({ loadingData: true });
                                // Load the data.
                                _context2.next = 5;
                                return DrupalPage.assureData({
                                    asyncMapper: asyncMapper,
                                    mapper: mapper,
                                    url: url
                                });

                            case 5:
                                _ref2 = _context2.sent;
                                pageUuid = _ref2.pageUuid;

                                if (!(this.lastRequest !== lastRequest)) {
                                    _context2.next = 9;
                                    break;
                                }

                                return _context2.abrupt('return');

                            case 9:
                                newState = (0, _assign2.default)({}, this.state, { pageUuid: pageUuid, loadingData: false, dataUrl: url });
                                // Mark this component as ready. This mounts the Layout and new ContentType.

                                this.setState(newState);
                                return _context2.abrupt('return', newState);

                            case 12:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            // Mark this component as not-ready. This unmounts the Layout and old ContentType.
            // Only render if the component is ready.
            if (!this.props.renderWhileLoadingData && this.entity && !(this.entity.isReady() && !this.state.loadingData)) {
                return null;
            }
            // Get props.
            var Layout = this.props.layout;
            var data = null;
            var entityMapper = null;
            // When this is the very first render, there isn't a pageUuid in state. Then only render the Layout.
            if (this.state.pageUuid) {
                // Get the data and content types with the state properties.
                data = _site2.default.getData(this.state.pageUuid);
                entityMapper = _react2.default.createElement(_EntityMapper2.default, { mapper: this.props.mapper, uuid: this.state.pageUuid, asyncMapper: this.props.asyncMapper, entityProps: (0, _assign2.default)({}, this.props.pageProps, { page: data }), ref: function ref(c) {
                        _this3.entity = c;
                    } });
            }
            if (!Layout) {
                return entityMapper;
            }
            return _react2.default.createElement(Layout, (0, _assign2.default)({ loadingData: this.state.loadingData, url: this.state.dataUrl, page: data }, this.props.layoutProps), entityMapper);
        }
    }], [{
        key: 'assureData',
        value: function assureData(_ref3) {
            var url = _ref3.url,
                mapper = _ref3.mapper,
                asyncMapper = _ref3.asyncMapper;

            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var pageUuid;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _site2.default.getPage(url);

                            case 2:
                                pageUuid = _context3.sent;

                                if (pageUuid) {
                                    _context3.next = 5;
                                    break;
                                }

                                throw Error('An error occurred getting a response from the server.');

                            case 5:
                                return _context3.abrupt('return', { pageUuid: pageUuid });

                            case 6:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }]);
    return DrupalPage;
}(_react.Component);

DrupalPage.contextTypes = {
    hnContext: _propTypes2.default.object
};
DrupalPage.propTypes = {
    asyncMapper: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOfType([_propTypes2.default.shape(), _propTypes2.default.func])]),
    layout: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
    layoutProps: _propTypes2.default.shape(),
    mapper: _propTypes2.default.oneOfType([_propTypes2.default.shape(), _propTypes2.default.func]),
    pageProps: _propTypes2.default.shape(),
    renderWhileLoadingData: _propTypes2.default.bool,
    url: _propTypes2.default.string.isRequired
};
DrupalPage.defaultProps = {
    asyncMapper: undefined,
    layout: undefined,
    layoutProps: {},
    pageProps: undefined,
    renderWhileLoadingData: false
};
exports.default = DrupalPage;
//# sourceMappingURL=DrupalPage.js.map
