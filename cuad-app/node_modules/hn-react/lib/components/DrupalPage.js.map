{"version":3,"sources":["hn-react/src/components/DrupalPage.js"],"names":["__awaiter","thisArg","_arguments","P","generator","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","DrupalPage","arguments","state","dataUrl","loadingData","pageUuid","lastRequest","loadData","props","drupalPage","context","hnContext","componentState","entities","url","setState","nextProps","mapper","asyncMapper","assureData","newState","renderWhileLoadingData","entity","isReady","Layout","layout","data","entityMapper","getData","createElement","uuid","entityProps","pageProps","page","ref","c","layoutProps","getPage","Error","contextTypes","object","propTypes","oneOfType","bool","shape","func","string","isRequired","defaultProps","undefined"],"mappings":"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","file":"DrupalPage.js","sourcesContent":["import React, { Component } from 'react';\nimport { parse } from 'url';\nimport PropTypes from 'prop-types';\nimport getNested from 'get-nested';\nimport site from '../utils/site';\nimport EntityMapper from './EntityMapper';\n\nclass DrupalPage extends Component {\n  static contextTypes = {\n    hnContext: PropTypes.object,\n  };\n\n  state = {\n    dataUrl: null,\n    loadingData: true,\n    pageUuid: null,\n  };\n\n  /**\n   * If this component exists in a tree that is invoked with the waitForHnData function, this function is invoked.\n   * Only after the promise is resolved, the component will be mounted. To keep the data fetched here, we assign the\n   * state to the hnContext provided by the DrupalPageContextProvider. This way, the state will be preserved trough\n   * multiple renders.\n   */\n  async asyncBootstrap() {\n    const drupalPage = await this.loadData(this.props);\n    this.context.hnContext.state = {\n      drupalPage: {\n        componentState: drupalPage,\n        dataUrl: drupalPage.dataUrl,\n      },\n      entities: [],\n    };\n    return true;\n  }\n\n  /**\n   * The first time this element is rendered, we always make sure the component and the Drupal page is loaded.\n   */\n  componentWillMount() {\n    const state = getNested(() => {\n      const drupalPage = this.context.hnContext.state.drupalPage;\n      return drupalPage.dataUrl === this.props.url && drupalPage.componentState;\n    });\n    if (state) {\n      this.setState(state);\n    } else {\n      this.loadData(this.props);\n    }\n  }\n\n  /**\n   * As soon as the url, mapper or asyncMapper props change, we want to load new data.\n   * This always unmounts and mounts all children (Layout and ContentType).\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.url !== nextProps.url ||\n      this.props.mapper !== nextProps.mapper ||\n      this.props.asyncMapper !== nextProps.asyncMapper\n    ) {\n      this.loadData(nextProps);\n    }\n  }\n\n  /**\n   * This makes sure the data for this url is ready to be rendered.\n   * @param url\n   * @param mapper\n   * @param asyncMapper\n   * @returns {Promise.<{pageUuid: string}>}\n   */\n  static async assureData({ url, mapper, asyncMapper }) {\n    // Get the page. If the page was already fetched before, this should be instant.\n    const pageUuid = await site.getPage(url);\n    if (!pageUuid) {\n      throw Error('An error occurred getting a response from the server.');\n    }\n\n    return { pageUuid };\n  }\n\n  componentWillUnmount() {\n    this.lastRequest = null;\n  }\n\n  lastRequest = null;\n\n  async loadData({ url, mapper, asyncMapper }) {\n    const lastRequest = Symbol(url);\n\n    this.lastRequest = lastRequest;\n\n    this.setState({ loadingData: true });\n\n    // Load the data.\n    const { pageUuid } = await DrupalPage.assureData({\n      asyncMapper,\n      mapper,\n      url,\n    });\n\n    // Check if this is still the last request.\n    if (this.lastRequest !== lastRequest) {\n      return;\n    }\n\n    const newState = {\n      ...this.state,\n      ...{ pageUuid, loadingData: false, dataUrl: url },\n    };\n\n    // Mark this component as ready. This mounts the Layout and new ContentType.\n    this.setState(newState);\n\n    return newState;\n  }\n\n  render() {\n    // Mark this component as not-ready. This unmounts the Layout and old ContentType.\n    // Only render if the component is ready.\n    if (\n      !this.props.renderWhileLoadingData &&\n      this.entity &&\n      !(this.entity.isReady() && !this.state.loadingData)\n    ) {\n      return null;\n    }\n\n    // Get props.\n    const Layout = this.props.layout;\n\n    let data = null;\n    let entityMapper = null;\n\n    // When this is the very first render, there isn't a pageUuid in state. Then only render the Layout.\n    if (this.state.pageUuid) {\n      // Get the data and content types with the state properties.\n      data = site.getData(this.state.pageUuid);\n\n      entityMapper = (\n        <EntityMapper\n          mapper={this.props.mapper}\n          uuid={this.state.pageUuid}\n          asyncMapper={this.props.asyncMapper}\n          entityProps={{ ...this.props.pageProps, page: data }}\n          ref={c => {\n            this.entity = c;\n          }}\n        />\n      );\n    }\n\n    if (!Layout) {\n      return entityMapper;\n    }\n\n    return (\n      <Layout\n        loadingData={this.state.loadingData}\n        url={this.state.dataUrl}\n        page={data}\n        {...this.props.layoutProps}\n      >\n        {entityMapper}\n      </Layout>\n    );\n  }\n}\n\nDrupalPage.propTypes = {\n  asyncMapper: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),\n  ]),\n  layout: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  layoutProps: PropTypes.shape(),\n  mapper: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),\n  pageProps: PropTypes.shape(),\n  renderWhileLoadingData: PropTypes.bool,\n  url: PropTypes.string.isRequired,\n};\n\nDrupalPage.defaultProps = {\n  asyncMapper: undefined,\n  layout: undefined,\n  layoutProps: {},\n  pageProps: undefined,\n  renderWhileLoadingData: false,\n};\n\nexport default DrupalPage;\n"],"sourceRoot":"../../.."}