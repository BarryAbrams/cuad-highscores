import { Promise } from 'es6-promise';
import 'isomorphic-fetch';
import SiteInitializeParams from './SiteInitializeParams';
declare class Site {
    private initialized;
    private url;
    private fetchOptions;
    private tokensToVerify;
    private user;
    private data;
    private pagesLoading;
    constructor(initParams?: SiteInitializeParams);
    initialize({url, fetchOptions}: SiteInitializeParams): void;
    reset(): void;
    /**
     * Creates an object that can be hydrated by the hydrate function.
     */
    dehydrate(): object;
    /**
     * Updates all properties with the object created by the dehydrate function.
     */
    hydrate(options: object): void;
    private fetch(path, options?);
    getPage(path: any, loadFromServer?: boolean): Promise<string>;
    private addData(data);
    getData(key: any): any;
    /**
     * * Translate ninja
     * Get the translations from the settings block.
     * Gets the language from context, or from parameter if overruled.
     * Returns input string when no translations are available.
     * @param string
     * @param langCode
     * @return {*}
     */
    t(string: any, langCode: any): any;
}
export default Site;
